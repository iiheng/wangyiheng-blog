import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,o as a,f as n}from"./app-vg0GsebR.js";const l={},e=n(`<h1 id="rust-编程语言" tabindex="-1"><a class="header-anchor" href="#rust-编程语言"><span>Rust 编程语言</span></a></h1><p>Rust 是一门开源的编程语言，由 Mozilla 开发，其设计目标是提供一种现代、简洁、安全、并发的编程语言。Rust 编译器可以保证内存安全，并提供自动内存管理，让开发者不用担心内存管理，从而可以专注于业务逻辑的实现。</p><h2 id="cargo-toml" tabindex="-1"><a class="header-anchor" href="#cargo-toml"><span>Cargo.toml</span></a></h2><p>Cargo 是 Rust 的构建系统，它可以自动管理项目的依赖，并提供编译、测试、打包等功能。Cargo.toml 是 Cargo 的配置文件，它定义了项目的依赖、名称、版本、作者、描述、分类、关键字、许可证、包的类型、默认的编译目标等信息。</p><div class="language-toml line-numbers-mode" data-highlighter="shiki" data-ext="toml" data-title="toml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;rust-demo&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 项目名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;0.1.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 项目版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">authors</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;wangyiheng &lt;&lt;EMAIL&gt;&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 作者信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">edition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;2021&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # Rust 版本，推荐使用最新的稳定版</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;A brief description of your project&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 项目简介</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">license</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;MIT OR Apache-2.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 许可证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">repository</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;https://github.com/yourusername/rust-demo&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 代码仓库地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">homepage</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;https://your-project-homepage.com&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 项目主页</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">documentation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;https://docs.rs/rust-demo&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 文档链接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">readme</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;README.md&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # README 文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">keywords</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;demo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;rust&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 关键词，用于 crates.io 搜索</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">categories</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;development-tools::testing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 分类，参考 crates.io 的分类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 如果您的项目是一个可执行文件而不是库，可以添加：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># default-run = &quot;main&quot; # 指定默认运行的二进制文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 如果您的项目需要特定的 Rust 版本，可以添加：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">rust-version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> = </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;1.70.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> # 最低支持的 Rust 版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># 在这里列出您的项目依赖</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit;">&quot;glutin&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust中的变量和常量" tabindex="-1"><a class="header-anchor" href="#rust中的变量和常量"><span>Rust中的变量和常量</span></a></h2><p>Rust语言中有三种主要的值存储方式：不可变变量、可变变量和常量。每种方式都有其特定的用途和特点。</p><h3 id="_1-不可变变量-immutable-variables" tabindex="-1"><a class="header-anchor" href="#_1-不可变变量-immutable-variables"><span>1. 不可变变量 (Immutable Variables)</span></a></h3><p>默认情况下，Rust中的所有变量都是不可变的。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特点：</p><ul><li>一旦赋值后不能再改变</li><li>可以在运行时计算</li><li>可以在不同的作用域中多次声明</li><li>支持遮蔽（shadowing）</li></ul><h3 id="_2-可变变量-mutable-variables" tabindex="-1"><a class="header-anchor" href="#_2-可变变量-mutable-variables"><span>2. 可变变量 (Mutable Variables)</span></a></h3><p>当需要修改变量的值时，可以将变量声明为可变的。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 这是允许的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li>使用<code>mut</code>关键字声明</li><li>值可以被修改</li><li>类型不能改变</li></ul><h3 id="_3-常量-constants" tabindex="-1"><a class="header-anchor" href="#_3-常量-constants"><span>3. 常量 (Constants)</span></a></h3><p>常量用于存储在整个程序运行期间都不会改变的值。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> MAX_POINTS</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> u32</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 100_000</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>特点：</p><ul><li>使用<code>const</code>关键字声明</li><li>必须显式指定类型</li><li>值必须是编译时可确定的常量表达式</li><li>可以在任何作用域中声明，包括全局作用域</li><li>不能被遮蔽</li></ul><h3 id="_4-变量遮蔽-shadowing" tabindex="-1"><a class="header-anchor" href="#_4-变量遮蔽-shadowing"><span>4. 变量遮蔽 (Shadowing)</span></a></h3><p>Rust允许声明一个与已存在变量同名的新变量，新变量会&quot;遮蔽&quot;之前的变量。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 新的x遮蔽了原来的x</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>特点：</p><ul><li>创建一个新变量，而不是修改原有变量</li><li>可以改变变量的类型</li><li>是块级作用域的</li></ul><h3 id="_5-比较" tabindex="-1"><a class="header-anchor" href="#_5-比较"><span>5. 比较</span></a></h3><table><thead><tr><th>特性</th><th>不可变变量</th><th>可变变量</th><th>常量</th></tr></thead><tbody><tr><td>可否修改值</td><td>否</td><td>是</td><td>否</td></tr><tr><td>运行时计算</td><td>可以</td><td>可以</td><td>不可以</td></tr><tr><td>类型推断</td><td>支持</td><td>支持</td><td>不支持（必须显式指定）</td></tr><tr><td>遮蔽</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>作用域</td><td>块级</td><td>块级</td><td>全局或块级</td></tr></tbody></table><h3 id="_6-使用场景" tabindex="-1"><a class="header-anchor" href="#_6-使用场景"><span>6. 使用场景</span></a></h3><ul><li>不可变变量：适用于大多数情况，有助于防止意外修改。</li><li>可变变量：当需要频繁修改值时使用。</li><li>常量：用于整个程序中都不会改变的值，如配置参数。</li><li>遮蔽：当需要转换值的类型或在处理过程中改变变量含义时很有用。</li></ul><p>通过合理使用这些特性，Rust在保证内存安全的同时，也为开发者提供了足够的灵活性。</p><h2 id="rust-数据类型" tabindex="-1"><a class="header-anchor" href="#rust-数据类型"><span>Rust 数据类型</span></a></h2><p>Rust 语言中的基础数据类型有以下几种。</p><h3 id="整数型-integer" tabindex="-1"><a class="header-anchor" href="#整数型-integer"><span>整数型（Integer）</span></a></h3><p>整数型简称整型，按照比特位长度和有无符号分为以下种类：</p><table><thead><tr><th>位长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><p>isize 和 usize 两种整数类型是用来衡量数据大小的，它们的位长度取决于所运行的目标平台，如果是 32 位架构的处理器将使用 32 位位长度整型。</p><p>整数的表述方法有以下几种：</p><table><thead><tr><th>进制</th><th>例</th></tr></thead><tbody><tr><td>十进制</td><td>98_222</td></tr><tr><td>十六进制</td><td>0xff</td></tr><tr><td>八进制</td><td>0o77</td></tr><tr><td>二进制</td><td>0b1111_0000</td></tr><tr><td>字节(只能表示 u8 型)</td><td>b&#39;A&#39;</td></tr></tbody></table><p>很显然，有的整数中间存在一个下划线，这种设计可以让人们在输入一个很大的数字时更容易判断数字的值大概是多少。</p><h3 id="浮点数型-floating-point" tabindex="-1"><a class="header-anchor" href="#浮点数型-floating-point"><span>浮点数型（Floating-Point）</span></a></h3><p>Rust 与其它语言一样支持 32 位浮点数（f32）和 64 位浮点数（f64）。默认情况下，64.0 将表示 64 位浮点数，因为现代计算机处理器对两种浮点数计算的速度几乎相同，但 64 位浮点数精度更高。</p><h4 id="实例" tabindex="-1"><a class="header-anchor" href="#实例"><span>实例</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// f64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> f32</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// f32</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数学运算" tabindex="-1"><a class="header-anchor" href="#数学运算"><span>数学运算</span></a></h3><p>用一段程序反映数学运算：</p><h4 id="实例-1" tabindex="-1"><a class="header-anchor" href="#实例-1"><span>实例</span></a></h4><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 加</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> difference</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 95.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4.3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 减</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> product</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 乘</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> quotient</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 56.7</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 32.2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 除</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> remainder</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 43</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 求余</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>许多运算符号之后加上 = 号是自运算的意思，例如：</p><p>sum += 1 等同于 sum = sum + 1。</p><p>**注意：**Rust 不支持 <strong>++</strong> 和 <strong>--</strong>，因为这两个运算符出现在变量的前后会影响代码可读性，减弱了开发者对变量改变的意识能力。</p><h3 id="布尔型" tabindex="-1"><a class="header-anchor" href="#布尔型"><span>布尔型</span></a></h3><p>布尔型用 bool 表示，值只能为 true 或 false。</p><h3 id="字符型" tabindex="-1"><a class="header-anchor" href="#字符型"><span>字符型</span></a></h3><p>字符型用 char 表示。</p><p>Rust的 char 类型大小为 4 个字节，代表 Unicode标量值，这意味着它可以支持中文，日文和韩文字符等非英文字符甚至表情符号和零宽度空格在 Rust 中都是有效的 char 值。</p><p>Unicode 值的范围从 U+0000 到 U+D7FF 和 U+E000 到 U+10FFFF （包括两端）。 但是，&quot;字符&quot;这个概念并不存在于 Unicode 中，因此您对&quot;字符&quot;是什么的直觉可能与Rust中的字符概念不匹配。所以一般推荐使用字符串储存 UTF-8 文字（非英文字符尽可能地出现在字符串中）。</p><p>**注意：**由于中文文字编码有两种（GBK 和 UTF-8），所以编程中使用中文字符串有可能导致乱码的出现，这是因为源程序与命令行的文字编码不一致，所以在 Rust 中字符串和字符都必须使用 UTF-8 编码，否则编译器会报错。</p><h3 id="复合类型" tabindex="-1"><a class="header-anchor" href="#复合类型"><span>复合类型</span></a></h3><h4 id="元组" tabindex="-1"><a class="header-anchor" href="#元组"><span>元组</span></a></h4><p>元组是用一对 ( ) 包括的一组数据，可以包含不同种类的数据：</p><h5 id="实例-2" tabindex="-1"><a class="header-anchor" href="#实例-2"><span>实例</span></a></h5><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> tup</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">f64</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">u8</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6.4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// tup.0 等于 500</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// tup.1 等于 6.4</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// tup.2 等于 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">z</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> tup</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// y 等于 6.4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h4><p>数组用一对 [ ] 包括的同类型数据。</p><h5 id="实例-3" tabindex="-1"><a class="header-anchor" href="#实例-3"><span>实例</span></a></h5><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// a 是一个长度为 5 的整型数组</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;January&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;February&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;March&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// b 是一个长度为 3 的字符串数组</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;">i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// c 是一个长度为 5 的 i32 数组</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 等同于 let d = [3, 3, 3, 3, 3];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> second</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 数组访问</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 123</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 错误：数组 a 不可变</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> mut</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 正确</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust中的语句和表达式" tabindex="-1"><a class="header-anchor" href="#rust中的语句和表达式"><span>Rust中的语句和表达式</span></a></h2><p>在Rust中，函数体由一系列的语句组成，可选地以一个表达式结尾。理解语句和表达式的区别对于编写高效的Rust代码至关重要。</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><ul><li><strong>语句（Statements）</strong>：执行某些操作且没有返回值的步骤。</li><li><strong>表达式（Expressions）</strong>：计算并返回一个值的代码片段。</li></ul><h3 id="语句示例" tabindex="-1"><a class="header-anchor" href="#语句示例"><span>语句示例</span></a></h3><p>语句通常以分号（;）结尾。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">println!</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表达式示例" tabindex="-1"><a class="header-anchor" href="#表达式示例"><span>表达式示例</span></a></h3><p>表达式计算出一个值，通常不以分号结尾。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分号的作用" tabindex="-1"><a class="header-anchor" href="#分号的作用"><span>分号的作用</span></a></h3><ul><li>语句通常以分号结尾。</li><li>表达式后如果加上分号，它就变成了一个语句，且不再返回值。</li></ul><h3 id="特殊情况" tabindex="-1"><a class="header-anchor" href="#特殊情况"><span>特殊情况</span></a></h3><h4 id="代码块中的最后一个表达式" tabindex="-1"><a class="header-anchor" href="#代码块中的最后一个表达式"><span>代码块中的最后一个表达式</span></a></h4><p>如果想让代码块返回值，最后一个表达式不应该加分号。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    y</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 注意这里没有分号，这个表达式的值(2)将被赋给x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="函数返回值" tabindex="-1"><a class="header-anchor" href="#函数返回值"><span>函数返回值</span></a></h4><p>如果函数的最后一个表达式不加分号，它的值将被作为函数的返回值。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> add_one</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    x</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  // 不加分号，这个表达式的值将被返回</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表达式语句" tabindex="-1"><a class="header-anchor" href="#表达式语句"><span>表达式语句</span></a></h3><p>有些表达式可以作为语句使用，这时它们会以分号结尾。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">// 6是一个表达式，但整行是一个语句</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="复杂表达式" tabindex="-1"><a class="header-anchor" href="#复杂表达式"><span>复杂表达式</span></a></h3><p>一些复杂的结构，如<code>if</code>、<code>match</code>、闭包等，本身就是表达式，不需要分号。</p><div class="language-rust line-numbers-mode" data-highlighter="shiki" data-ext="rust" data-title="rust" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> condition</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> };</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><ul><li>语句通常以分号结尾，执行操作但不返回值。</li><li>表达式计算并返回值，通常不以分号结尾。</li><li>在Rust中，分号的使用是一个重要的语法元素，但理解其背后的概念（语句vs表达式）更为重要。</li></ul><p>理解这些概念对于编写清晰、高效的Rust代码非常重要，尤其是在处理函数返回值和复杂控制流时。</p><h2 id="rust函数" tabindex="-1"><a class="header-anchor" href="#rust函数"><span>Rust函数</span></a></h2><p>Rust 函数的基本形式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fn &lt;函数名&gt; (&lt;参数列表&gt;) -&gt; &lt;返回类型&gt; {</span></span>
<span class="line"><span>    函数体</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust条件语句" tabindex="-1"><a class="header-anchor" href="#rust条件语句"><span>Rust条件语句</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>if &lt;条件&gt; {</span></span>
<span class="line"><span>    &lt;代码块&gt;</span></span>
<span class="line"><span>} else if &lt;条件&gt; {</span></span>
<span class="line"><span>    &lt;代码块&gt;</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>    &lt;代码块&gt;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust循环语句" tabindex="-1"><a class="header-anchor" href="#rust循环语句"><span>Rust循环语句</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 无限循环, 直到break退出循环,在break 后添加一个值作为返回值</span></span>
<span class="line"><span>loop {</span></span>
<span class="line"><span>    &lt;代码块&gt;</span></span>
<span class="line"><span>    break;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>while &lt;条件&gt; {</span></span>
<span class="line"><span>    &lt;代码块&gt;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for &lt;变量&gt; in &lt;表达式&gt; {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust迭代器" tabindex="-1"><a class="header-anchor" href="#rust迭代器"><span>Rust迭代器</span></a></h2><h2 id="rust所有权" tabindex="-1"><a class="header-anchor" href="#rust所有权"><span>Rust所有权</span></a></h2><p>所有权的三条规则：</p><ul><li>Rust 中的每个值都有一个变量，称为其所有者</li><li>一个值只能有一个所有者</li><li>当所有者不在程序运行范围时，该值将被删除。</li></ul><h2 id="rust引用" tabindex="-1"><a class="header-anchor" href="#rust引用"><span>Rust引用</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>let s = String::from(&quot;hello&quot;);</span></span>
<span class="line"><span>let r1 = &amp;s; // 不可变引用（可以进行多次引用，只能读取不能修改）</span></span>
<span class="line"><span>let r2 = &amp;s; // 再次引用</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let r3 = &amp;mut s; // 可变引用（不可多次引用，可以读取也可以修改）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust-闭包" tabindex="-1"><a class="header-anchor" href="#rust-闭包"><span>Rust 闭包</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>|参数...|{ 表达式}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="rust-结构体" tabindex="-1"><a class="header-anchor" href="#rust-结构体"><span>Rust 结构体</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>struct &lt;结构体名&gt; {</span></span>
<span class="line"><span>    &lt;成员变量&gt;: &lt;类型&gt;,</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl &lt;结构体名&gt; {</span></span>
<span class="line"><span>    fn &lt;方法名&gt;(&amp;self, &lt;参数&gt;) -&gt; &lt;返回类型&gt; {</span></span>
<span class="line"><span>        &lt;代码块&gt;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust枚举类" tabindex="-1"><a class="header-anchor" href="#rust枚举类"><span>Rust枚举类</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>enum &lt;枚举名&gt; {</span></span>
<span class="line"><span>    &lt;成员1&gt;,</span></span>
<span class="line"><span>    &lt;成员2&gt;,</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust泛型" tabindex="-1"><a class="header-anchor" href="#rust泛型"><span>Rust泛型</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>struct Point&lt;T&gt; {</span></span>
<span class="line"><span>    x: T,</span></span>
<span class="line"><span>    y: T</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>emun Option&lt;T&gt; {</span></span>
<span class="line"><span>    Some(T),</span></span>
<span class="line"><span>    None</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust特性" tabindex="-1"><a class="header-anchor" href="#rust特性"><span>Rust特性</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>trait &lt;特性名&gt; {</span></span>
<span class="line"><span>    fn &lt;方法名&gt;(&amp;self, &lt;参数&gt;) -&gt; &lt;返回类型&gt;;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>impl &lt;结构体名&gt; for &lt;特性名&gt; {</span></span>
<span class="line"><span>    fn &lt;方法名&gt;(&amp;self, &lt;参数&gt;) -&gt; &lt;返回类型&gt; {</span></span>
<span class="line"><span>        &lt;代码块&gt;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust生命周期" tabindex="-1"><a class="header-anchor" href="#rust生命周期"><span>Rust生命周期</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let r;</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        let s1 = &quot;rust&quot;;</span></span>
<span class="line"><span>        let s2 = &quot;ecmascript&quot;;</span></span>
<span class="line"><span>        r = longer(s1, s2);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    println!(&quot;{} is longer&quot;, r);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>fn longer&lt;&#39;a&gt;(s1: &amp;&#39;a str, s2: &amp;&#39;a str) -&gt; &amp;&#39;a str {</span></span>
<span class="line"><span>    if s2.len() &gt; s1.len() {</span></span>
<span class="line"><span>        s2</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>        s1</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust集合与字符串" tabindex="-1"><a class="header-anchor" href="#rust集合与字符串"><span>Rust集合与字符串</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>let v = vec![1, 2, 3];</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let s = String::from(&quot;hello&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>let h = HashMap::new();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="并发编程" tabindex="-1"><a class="header-anchor" href="#并发编程"><span>并发编程</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>use std::thread;</span></span>
<span class="line"><span>use std::time::Duration;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let handle = thread::spawn(|| {</span></span>
<span class="line"><span>        for i in 0..5 {</span></span>
<span class="line"><span>            println!(&quot;spawned thread print {}&quot;, i);</span></span>
<span class="line"><span>            thread::sleep(Duration::from_millis(1));</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    for i in 0..3 {</span></span>
<span class="line"><span>        println!(&quot;main thread print {}&quot;, i);</span></span>
<span class="line"><span>        thread::sleep(Duration::from_millis(1));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    handle.join().unwrap();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>use std::thread;</span></span>
<span class="line"><span>use std::sync::mpsc;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    let (tx, rx) = mpsc::channel();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    thread::spawn(move || {</span></span>
<span class="line"><span>        let val = String::from(&quot;hi&quot;);</span></span>
<span class="line"><span>        tx.send(val).unwrap();</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let received = rx.recv().unwrap();</span></span>
<span class="line"><span>    println!(&quot;Got: {}&quot;, received);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust宏" tabindex="-1"><a class="header-anchor" href="#rust宏"><span>Rust宏</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 宏的定义</span></span>
<span class="line"><span>macro_rules! vec {</span></span>
<span class="line"><span>    // 基本情况，空的情况</span></span>
<span class="line"><span>    () =&gt; {</span></span>
<span class="line"><span>        Vec::new()</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>    // 递归情况，带有元素的情况</span></span>
<span class="line"><span>    ($($element:expr),+ $(,)?) =&gt; {</span></span>
<span class="line"><span>        {</span></span>
<span class="line"><span>            let mut temp_vec = Vec::new();</span></span>
<span class="line"><span>            $(</span></span>
<span class="line"><span>                temp_vec.push($element);</span></span>
<span class="line"><span>            )+</span></span>
<span class="line"><span>            temp_vec</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fn main() {</span></span>
<span class="line"><span>    // 调用宏</span></span>
<span class="line"><span>    let my_vec = vec![1, 2, 3];</span></span>
<span class="line"><span>    println!(&quot;{:?}&quot;, my_vec); // 输出: [1, 2, 3]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    let empty_vec = vec![];</span></span>
<span class="line"><span>    println!(&quot;{:?}&quot;, empty_vec); // 输出: []</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rust智能指针" tabindex="-1"><a class="header-anchor" href="#rust智能指针"><span>Rust智能指针</span></a></h2><h2 id="rust异步编程async-await" tabindex="-1"><a class="header-anchor" href="#rust异步编程async-await"><span>Rust异步编程async/await</span></a></h2><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>// 引入所需的依赖库</span></span>
<span class="line"><span>use tokio;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 异步函数，模拟异步任务</span></span>
<span class="line"><span>async fn async_task() -&gt; u32 {</span></span>
<span class="line"><span>    // 模拟异步操作，等待 1 秒钟</span></span>
<span class="line"><span>    tokio::time::sleep(tokio::time::Duration::from_secs(1)).await;</span></span>
<span class="line"><span>    // 返回结果</span></span>
<span class="line"><span>    42</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 异步任务执行函数</span></span>
<span class="line"><span>async fn execute_async_task() {</span></span>
<span class="line"><span>    // 调用异步任务，并等待其完成</span></span>
<span class="line"><span>    let result = async_task().await;</span></span>
<span class="line"><span>    // 输出结果</span></span>
<span class="line"><span>    println!(&quot;Async task result: {}&quot;, result);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 主函数</span></span>
<span class="line"><span>#[tokio::main]</span></span>
<span class="line"><span>async fn main() {</span></span>
<span class="line"><span>    println!(&quot;Start executing async task...&quot;);</span></span>
<span class="line"><span>    // 调用异步任务执行函数，并等待其完成</span></span>
<span class="line"><span>    execute_async_task().await;</span></span>
<span class="line"><span>    println!(&quot;Async task completed!&quot;);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,130),t=[e];function h(p,d){return a(),i("div",null,t)}const c=s(l,[["render",h],["__file","rust.html.vue"]]),g=JSON.parse('{"path":"/posts/rust.html","title":"Rust 编程语言","lang":"zh-CN","frontmatter":{"date":"2024-08-09T00:00:00.000Z","category":["编程语言"],"tag":["rust"],"archive":true,"description":"Rust 编程语言 Rust 是一门开源的编程语言，由 Mozilla 开发，其设计目标是提供一种现代、简洁、安全、并发的编程语言。Rust 编译器可以保证内存安全，并提供自动内存管理，让开发者不用担心内存管理，从而可以专注于业务逻辑的实现。 Cargo.toml Cargo 是 Rust 的构建系统，它可以自动管理项目的依赖，并提供编译、测试、打包等...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/wangyiheng-blog/posts/rust.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Rust 编程语言"}],["meta",{"property":"og:description","content":"Rust 编程语言 Rust 是一门开源的编程语言，由 Mozilla 开发，其设计目标是提供一种现代、简洁、安全、并发的编程语言。Rust 编译器可以保证内存安全，并提供自动内存管理，让开发者不用担心内存管理，从而可以专注于业务逻辑的实现。 Cargo.toml Cargo 是 Rust 的构建系统，它可以自动管理项目的依赖，并提供编译、测试、打包等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-11T09:34:52.000Z"}],["meta",{"property":"article:author","content":"DG"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:published_time","content":"2024-08-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-11T09:34:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust 编程语言\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-11T09:34:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"DG\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"Cargo.toml","slug":"cargo-toml","link":"#cargo-toml","children":[]},{"level":2,"title":"Rust中的变量和常量","slug":"rust中的变量和常量","link":"#rust中的变量和常量","children":[{"level":3,"title":"1. 不可变变量 (Immutable Variables)","slug":"_1-不可变变量-immutable-variables","link":"#_1-不可变变量-immutable-variables","children":[]},{"level":3,"title":"2. 可变变量 (Mutable Variables)","slug":"_2-可变变量-mutable-variables","link":"#_2-可变变量-mutable-variables","children":[]},{"level":3,"title":"3. 常量 (Constants)","slug":"_3-常量-constants","link":"#_3-常量-constants","children":[]},{"level":3,"title":"4. 变量遮蔽 (Shadowing)","slug":"_4-变量遮蔽-shadowing","link":"#_4-变量遮蔽-shadowing","children":[]},{"level":3,"title":"5. 比较","slug":"_5-比较","link":"#_5-比较","children":[]},{"level":3,"title":"6. 使用场景","slug":"_6-使用场景","link":"#_6-使用场景","children":[]}]},{"level":2,"title":"Rust 数据类型","slug":"rust-数据类型","link":"#rust-数据类型","children":[{"level":3,"title":"整数型（Integer）","slug":"整数型-integer","link":"#整数型-integer","children":[]},{"level":3,"title":"浮点数型（Floating-Point）","slug":"浮点数型-floating-point","link":"#浮点数型-floating-point","children":[]},{"level":3,"title":"数学运算","slug":"数学运算","link":"#数学运算","children":[]},{"level":3,"title":"布尔型","slug":"布尔型","link":"#布尔型","children":[]},{"level":3,"title":"字符型","slug":"字符型","link":"#字符型","children":[]},{"level":3,"title":"复合类型","slug":"复合类型","link":"#复合类型","children":[]}]},{"level":2,"title":"Rust中的语句和表达式","slug":"rust中的语句和表达式","link":"#rust中的语句和表达式","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"语句示例","slug":"语句示例","link":"#语句示例","children":[]},{"level":3,"title":"表达式示例","slug":"表达式示例","link":"#表达式示例","children":[]},{"level":3,"title":"分号的作用","slug":"分号的作用","link":"#分号的作用","children":[]},{"level":3,"title":"特殊情况","slug":"特殊情况","link":"#特殊情况","children":[]},{"level":3,"title":"表达式语句","slug":"表达式语句","link":"#表达式语句","children":[]},{"level":3,"title":"复杂表达式","slug":"复杂表达式","link":"#复杂表达式","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"Rust函数","slug":"rust函数","link":"#rust函数","children":[]},{"level":2,"title":"Rust条件语句","slug":"rust条件语句","link":"#rust条件语句","children":[]},{"level":2,"title":"Rust循环语句","slug":"rust循环语句","link":"#rust循环语句","children":[]},{"level":2,"title":"Rust迭代器","slug":"rust迭代器","link":"#rust迭代器","children":[]},{"level":2,"title":"Rust所有权","slug":"rust所有权","link":"#rust所有权","children":[]},{"level":2,"title":"Rust引用","slug":"rust引用","link":"#rust引用","children":[]},{"level":2,"title":"Rust 闭包","slug":"rust-闭包","link":"#rust-闭包","children":[]},{"level":2,"title":"Rust 结构体","slug":"rust-结构体","link":"#rust-结构体","children":[]},{"level":2,"title":"Rust枚举类","slug":"rust枚举类","link":"#rust枚举类","children":[]},{"level":2,"title":"Rust泛型","slug":"rust泛型","link":"#rust泛型","children":[]},{"level":2,"title":"Rust特性","slug":"rust特性","link":"#rust特性","children":[]},{"level":2,"title":"Rust生命周期","slug":"rust生命周期","link":"#rust生命周期","children":[]},{"level":2,"title":"Rust集合与字符串","slug":"rust集合与字符串","link":"#rust集合与字符串","children":[]},{"level":2,"title":"并发编程","slug":"并发编程","link":"#并发编程","children":[]},{"level":2,"title":"Rust宏","slug":"rust宏","link":"#rust宏","children":[]},{"level":2,"title":"Rust智能指针","slug":"rust智能指针","link":"#rust智能指针","children":[]},{"level":2,"title":"Rust异步编程async/await","slug":"rust异步编程async-await","link":"#rust异步编程async-await","children":[]}],"git":{"createdTime":1723368892000,"updatedTime":1723368892000,"contributors":[{"name":"iiheng","email":"1269305589@qq.com","commits":1}]},"readingTime":{"minutes":10.2,"words":3061},"filePathRelative":"posts/rust.md","localizedDate":"2024年8月9日","excerpt":"\\n<p>Rust 是一门开源的编程语言，由 Mozilla 开发，其设计目标是提供一种现代、简洁、安全、并发的编程语言。Rust 编译器可以保证内存安全，并提供自动内存管理，让开发者不用担心内存管理，从而可以专注于业务逻辑的实现。</p>\\n<h2>Cargo.toml</h2>\\n<p>Cargo 是 Rust 的构建系统，它可以自动管理项目的依赖，并提供编译、测试、打包等功能。Cargo.toml 是 Cargo 的配置文件，它定义了项目的依赖、名称、版本、作者、描述、分类、关键字、许可证、包的类型、默认的编译目标等信息。</p>\\n<div class=\\"language-toml line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"toml\\" data-title=\\"toml\\" style=\\"--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes github-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">package</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">name</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"rust-demo\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 项目名称</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"0.1.0\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 项目版本</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">authors</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"wangyiheng &lt;&lt;EMAIL&gt;&gt;\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">] </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 作者信息</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">edition</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"2021\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # Rust 版本，推荐使用最新的稳定版</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">description</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"A brief description of your project\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 项目简介</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">license</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"MIT OR Apache-2.0\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 许可证</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">repository</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"https://github.com/yourusername/rust-demo\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 代码仓库地址</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">homepage</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"https://your-project-homepage.com\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 项目主页</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">documentation</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"https://docs.rs/rust-demo\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 文档链接</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">readme</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"README.md\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # README 文件路径</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">keywords</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"demo\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"example\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"rust\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">] </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 关键词，用于 crates.io 搜索</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">categories</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = [</span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"development-tools::testing\\"</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">] </span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 分类，参考 crates.io 的分类</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 如果您的项目是一个可执行文件而不是库，可以添加：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># default-run = \\"main\\" # 指定默认运行的二进制文件</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 如果您的项目需要特定的 Rust 版本，可以添加：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#E06C75\\">rust-version</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\"> = </span><span style=\\"--shiki-light:#032F62;--shiki-dark:#98C379\\">\\"1.70.0\\"</span><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"> # 最低支持的 Rust 版本</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">[</span><span style=\\"--shiki-light:#6F42C1;--shiki-dark:#61AFEF\\">dependencies</span><span style=\\"--shiki-light:#24292E;--shiki-dark:#ABB2BF\\">]</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic\\"># 在这里列出您的项目依赖</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#B31D28;--shiki-dark:#FFFFFF;--shiki-light-font-style:italic;--shiki-dark-font-style:inherit\\">\\"glutin\\"</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,g as data};
